// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/v1tbrah/relation-service/internal/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddFriend provides a mock function with given fields: ctx, userID, friendID
func (_m *Storage) AddFriend(ctx context.Context, userID int64, friendID int64) error {
	ret := _m.Called(ctx, userID, friendID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFriends provides a mock function with given fields: ctx, userID, direction, userOffsetID, limit
func (_m *Storage) GetFriends(ctx context.Context, userID int64, direction model.Direction, userOffsetID int64, limit int64) ([]int64, error) {
	ret := _m.Called(ctx, userID, direction, userOffsetID, limit)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Direction, int64, int64) ([]int64, error)); ok {
		return rf(ctx, userID, direction, userOffsetID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Direction, int64, int64) []int64); ok {
		r0 = rf(ctx, userID, direction, userOffsetID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, model.Direction, int64, int64) error); ok {
		r1 = rf(ctx, userID, direction, userOffsetID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFriend provides a mock function with given fields: ctx, userID, friendID
func (_m *Storage) RemoveFriend(ctx context.Context, userID int64, friendID int64) error {
	ret := _m.Called(ctx, userID, friendID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
